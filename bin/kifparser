#!/usr/bin/env python3
"""
This script parses a KIF file and saves AIIRE ontology CSV files.

Usage: kifparser [-h] [--implications] [--no-implications]
    infile expressions_file concepts_file relations_file

SUO-KIF parser.

positional arguments:
  infile             Input KIF file path or - for stdin
  expressions_file   Output CSV file path for the expressions table
                     or - for stdout
  concepts_file      Output CSV file path for the concepts table
                     or - for stdout
  relations_file     Output CSV file path for the relations table
                     or - for stdout

optional arguments:
  -h, --help         show this help message and exit
  --implications     Apply implications inference
  --no-implications  Do not apply implications inference (default)
  -d, --debug        Print debugging information
  -v, --verbose      Be verbose
"""

from kifparser import KIFParser, KIFGrammar
from aiire import Ontology
import sys
import argparse
import logging


def main():
    """Parse KIF file, evaluate ontology, and save it."""
    # Parse command line arguments
    argparser = argparse.ArgumentParser(description='SUO-KIF parser.')
    argparser.add_argument(
        'infile', type=argparse.FileType('r'),
        help='Input KIF file path or - for stdin'
    )
    argparser.add_argument(
        'expressions_file', type=argparse.FileType('w'),
        help='Output CSV file path for the expressions table or - for stdout'
    )
    argparser.add_argument(
        'concepts_file', type=argparse.FileType('w'),
        help='Output CSV file path for the concepts table or - for stdout'
    )
    argparser.add_argument(
        'relations_file', type=argparse.FileType('w'),
        help='Output CSV file path for the relations table or - for stdout'
    )
    argparser.add_argument(
        '--implications', action='store_true',
        help='Apply implications inference'
    )
    argparser.add_argument(
        '--no-implications', action='store_false',
        help='Do not apply implications inference (default)'
    )
    argparser.add_argument(
        '-d', '--debug',
        help="Print debugging information",
        action="store_const", dest="loglevel", const=logging.DEBUG,
        default=logging.WARNING,
    )
    argparser.add_argument(
        '-v', '--verbose',
        help="Be verbose",
        action="store_const", dest="loglevel", const=logging.INFO,
    )
    argparser.set_defaults(implications=False)
    args = argparser.parse_args()

    # Configure script logger
    logging.basicConfig(level=args.loglevel)
    logger = logging.getLogger(sys.argv[0])
    formatter = logging.Formatter('%(message)s')
    ch = logging.StreamHandler()
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    # Parse trees of KIF files are very deep.
    sys.setrecursionlimit(200000)

    # Parse the input file (args.infile)
    p = KIFParser()
    largest = None
    largest_size = 0
    # Find the parse tree with the largest coverage
    for obj in p.parse(args.infile):
        logger.debug(f'Found: {obj}')
        if not isinstance(obj, KIFGrammar.KIFPart):
            continue
        if (largest is None) or (obj.end - obj.start > largest_size):
            largest = obj
            largest_size = largest.end - largest.start

    logger.info(f'The largest constituent found:\n{largest}')

    # Evaluate concept (the meaning of the KIF parse tree)
    conc = largest.eval_conc()

    # Apply implications if set
    if args.implications:
        have_conc = KIFGrammar.ontology.create_or_get('have concept')
        for impl in conc.ontology.apply_implications():
            conc.add_attr(have_conc, impl)

    logger.info(f'Evaluated concept:\n{conc}')

    # Save the extracted ontology
    extracted_ontology = Ontology.from_concept(conc)
    extracted_ontology.save_db_csv(
        args.expressions_file, args.concepts_file,
        args.relations_file
    )

    # Close the file handles open by argparse
    if args.infile is not sys.stdin:
        args.infile.close()
    if args.expressions_file is not sys.stdout:
        args.expressions_file.close()
    if args.concepts_file is not sys.stdout:
        args.concepts_file.close()
    if args.relations_file is not sys.stdout:
        args.relations_file.close()


if __name__ == '__main__':
    main()
